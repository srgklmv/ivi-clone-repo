version: "3.9"

services:

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11.3-management
    restart: always
    ports:
      - "5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 10

  auth:
    container_name: auth
    build:
      context: ./ivi-clone-auth-ms
      dockerfile: ./Dockerfile
      target: development
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth_pg:
        condition: service_healthy

  auth_pg:
    container_name: auth_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always

  comments:
    container_name: comments
    build:
      context: ./ivi-clone-comments-ms
      dockerfile: ./Dockerfile
      target: development
    restart: always
    depends_on:
      comments_pg:
        condition: service_healthy

  comments_pg:
    container_name: comments_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: comments
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      movies:
        condition: service_started

  genres:
    container_name: genres
    build:
      context: ./ivi-clone-genres-ms
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      genres_pg:
        condition: service_healthy

  genres_pg:
    container_name: genres_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: genres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      profiles:
        condition: service_started

  movies:
    container_name: movies
    build:
      context: ./ivi-clone-movies-ms
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      movies_pg:
        condition: service_healthy

  movies_pg:
    container_name: movies_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: movies
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      persons:
        condition: service_started

  persons:
    container_name: persons
    build:
      context: ./ivi-clone-persons-ms
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      persons_pg:
        condition: service_healthy

  persons_pg:
    container_name: persons_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: persons
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      genres:
        condition: service_started

  profiles:
    container_name: profiles
    build:
      context: ./ivi-clone-profiles-ms
      dockerfile: ./Dockerfile
      target: development
    restart: always
    depends_on:
      profiles_pg:
        condition: service_healthy


  profiles_pg:
    container_name: profiles_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: profiles
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      roles:
        condition: service_started

  roles:
    container_name: roles
    build:
      context: ./ivi-clone-roles-ms
      dockerfile: ./Dockerfile
      target: development
    restart: always
    depends_on:
      roles_pg:
        condition: service_healthy


  roles_pg:
    container_name: roles_pg
    image: postgres:15.2-alpine
    environment:
      POSTGRES_DB: roles
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: pg_isready -U postgres
    ports:
      - "5432"
    restart: always
    depends_on:
      auth:
        condition: service_started

  api_gateway:
    container_name: api_gateway
    build:
      context: ./ivi-clone-api-gateway
      dockerfile: ./Dockerfile
    ports:
      - "3100:3100"
    restart: always
    depends_on:
      comments:
        condition: service_started
